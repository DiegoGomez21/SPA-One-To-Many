{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/comment.service\";\nimport * as i2 from \"@angular/router\";\nexport class CommentFormComponent {\n  constructor(commentService, route) {\n    this.commentService = commentService;\n    this.route = route;\n    this.comments = [];\n    this.newComment = {};\n    this.tutorialId = this.route.snapshot.params[\"id\"];\n  }\n  ngOnInit() {\n    this.getComments();\n  }\n  getComments() {\n    this.commentService.getAll(this.tutorialId).subscribe(data => {\n      this.comments = data;\n      console.log(data);\n    }, error => {\n      console.log(error);\n    });\n  }\n  // add a method to handle form submission\n  onSubmit() {\n    this.commentService.create(this.tutorialId, this.newComment).subscribe(response => {\n      console.log(response);\n      this.newComment = {}; // clear the form\n      this.getComments(); // refresh the comment list\n    }, error => {\n      console.log(error);\n    });\n  }\n}\nCommentFormComponent.ɵfac = function CommentFormComponent_Factory(t) {\n  return new (t || CommentFormComponent)(i0.ɵɵdirectiveInject(i1.CommentService), i0.ɵɵdirectiveInject(i2.ActivatedRoute));\n};\nCommentFormComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: CommentFormComponent,\n  selectors: [[\"app-comment-form\"]],\n  decls: 7,\n  vars: 1,\n  consts: [[3, \"ngSubmit\"], [1, \"form-group\"], [\"for\", \"content\"], [\"name\", \"content\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\"]],\n  template: function CommentFormComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"form\", 0);\n      i0.ɵɵlistener(\"ngSubmit\", function CommentFormComponent_Template_form_ngSubmit_0_listener() {\n        return ctx.onSubmit();\n      });\n      i0.ɵɵelementStart(1, \"div\", 1)(2, \"label\", 2);\n      i0.ɵɵtext(3, \"Content\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(4, \"textarea\", 3);\n      i0.ɵɵlistener(\"ngModelChange\", function CommentFormComponent_Template_textarea_ngModelChange_4_listener($event) {\n        return ctx.newComment.content = $event;\n      });\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(5, \"button\", 4);\n      i0.ɵɵtext(6, \"Submit\");\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngModel\", ctx.newComment.content);\n    }\n  },\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":";;;AAUA,OAAM,MAAOA,oBAAoB;EAK/BC,YAAoBC,cAA8B,EAAUC,KAAqB;IAA7D,mBAAc,GAAdD,cAAc;IAA0B,UAAK,GAALC,KAAK;IAHjE,aAAQ,GAAU,EAAE;IACpB,eAAU,GAAQ,EAAE;IAGlB,IAAI,CAACC,UAAU,GAAG,IAAI,CAACD,KAAK,CAACE,QAAQ,CAACC,MAAM,CAAC,IAAI,CAAC;EACpD;EAEAC,QAAQ;IACN,IAAI,CAACC,WAAW,EAAE;EACpB;EAEAA,WAAW;IACT,IAAI,CAACN,cAAc,CAACO,MAAM,CAAC,IAAI,CAACL,UAAU,CAAC,CACxCM,SAAS,CACRC,IAAI,IAAG;MACL,IAAI,CAACC,QAAQ,GAAGD,IAAI;MACpBE,OAAO,CAACC,GAAG,CAACH,IAAI,CAAC;IACnB,CAAC,EACDI,KAAK,IAAG;MACNF,OAAO,CAACC,GAAG,CAACC,KAAK,CAAC;IACpB,CAAC,CAAC;EACR;EAEA;EACAC,QAAQ;IACN,IAAI,CAACd,cAAc,CAACe,MAAM,CAAC,IAAI,CAACb,UAAU,EAAE,IAAI,CAACc,UAAU,CAAC,CACzDR,SAAS,CACRS,QAAQ,IAAG;MACTN,OAAO,CAACC,GAAG,CAACK,QAAQ,CAAC;MACrB,IAAI,CAACD,UAAU,GAAG,EAAE,CAAC,CAAC;MACtB,IAAI,CAACV,WAAW,EAAE,CAAC,CAAC;IACtB,CAAC,EACDO,KAAK,IAAG;MACNF,OAAO,CAACC,GAAG,CAACC,KAAK,CAAC;IACpB,CAAC,CAAC;EACR;;AArCWf,oBAAoB;mBAApBA,oBAAoB;AAAA;AAApBA,oBAAoB;QAApBA,oBAAoB;EAAAoB;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCVjCC,+BAA8B;MAAxBA;QAAA,OAAYC,cAAU;MAAA,EAAC;MACzBD,8BAAwB;MACDA,uBAAO;MAAAA,iBAAQ;MACpCA,mCAA+E;MAAjCA;QAAA;MAAA,EAAgC;MAACA,iBAAW;MAG5FA,iCAA8C;MAAAA,sBAAM;MAAAA,iBAAS;;;MAHbA,eAAgC;MAAhCA,gDAAgC","names":["CommentFormComponent","constructor","commentService","route","tutorialId","snapshot","params","ngOnInit","getComments","getAll","subscribe","data","comments","console","log","error","onSubmit","create","newComment","response","selectors","decls","vars","consts","template","i0","ctx"],"sourceRoot":"","sources":["C:\\Users\\Diego Gomez\\Desktop\\SPA\\Proyecto-SPA-Angular\\Angular13Crud\\src\\app\\comment-form\\comment-form.component.ts","C:\\Users\\Diego Gomez\\Desktop\\SPA\\Proyecto-SPA-Angular\\Angular13Crud\\src\\app\\comment-form\\comment-form.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { CommentService } from '../services/comment.service';\nimport { ActivatedRoute } from '@angular/router';\n\n@Component({\n  selector: 'app-comment-form',\n  templateUrl: './comment-form.component.html',\n  styleUrls: ['./comment-form.component.css']\n})\n\nexport class CommentFormComponent implements OnInit {\n  tutorialId: string;\n  comments: any[] = [];\n  newComment: any = {};\n  \n  constructor(private commentService: CommentService, private route: ActivatedRoute) {\n    this.tutorialId = this.route.snapshot.params[\"id\"];\n  }\n  \n  ngOnInit(): void {\n    this.getComments();\n  }\n  \n  getComments() {\n    this.commentService.getAll(this.tutorialId)\n      .subscribe(\n        data => {\n          this.comments = data;\n          console.log(data);\n        },\n        error => {\n          console.log(error);\n        });\n  }\n  \n  // add a method to handle form submission\n  onSubmit() {\n    this.commentService.create(this.tutorialId, this.newComment)\n      .subscribe(\n        response => {\n          console.log(response);\n          this.newComment = {}; // clear the form\n          this.getComments(); // refresh the comment list\n        },\n        error => {\n          console.log(error);\n        });\n  }\n}\n\n","<form (ngSubmit)=\"onSubmit()\">\n    <div class=\"form-group\">\n      <label for=\"content\">Content</label>\n      <textarea class=\"form-control\" name=\"content\" [(ngModel)]=\"newComment.content\"></textarea>\n    </div>\n  \n    <button type=\"submit\" class=\"btn btn-primary\">Submit</button>\n  </form>\n  "]},"metadata":{},"sourceType":"module","externalDependencies":[]}