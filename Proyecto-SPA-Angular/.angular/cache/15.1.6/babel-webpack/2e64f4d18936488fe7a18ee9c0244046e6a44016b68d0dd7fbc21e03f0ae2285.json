{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/comment.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/forms\";\nexport class CommentFormComponent {\n  constructor(commentService, route, formBuilder) {\n    this.commentService = commentService;\n    this.route = route;\n    this.formBuilder = formBuilder;\n    this.newComment = {};\n    this.submitted = false;\n    this.commentForm = this.formBuilder.group({\n      name: ['', Validators.required],\n      text: ['', Validators.required]\n    });\n    this.tutorialId = this.route.snapshot.params['id'];\n  }\n  ngOnInit() {\n    this.getComments();\n  }\n  getComments() {\n    this.commentService.getComments(this.tutorialId).subscribe({\n      next: data => {\n        this.comments = data;\n      },\n      error: error => {\n        console.log(error);\n      }\n    });\n  }\n  submitComment() {\n    const comment = {\n      name: this.commentForm.get('name')?.value,\n      text: this.commentForm.get('text')?.value\n    };\n    this.commentService.createComment(this.tutorialId, comment).subscribe({\n      next: response => {\n        console.log(response);\n        this.submitted = true;\n      },\n      error: error => {\n        console.log(error);\n      }\n    });\n  }\n  onSubmit() {\n    const comment = {\n      name: this.commentForm.get('name')?.value,\n      text: this.commentForm.get('text')?.value\n    };\n    this.commentService.createComment(this.tutorialId, comment).subscribe({\n      next: response => {\n        console.log(response);\n        this.commentForm.reset();\n        this.getComments();\n      },\n      error: error => {\n        console.log(error);\n      }\n    });\n  }\n}\nCommentFormComponent.ɵfac = function CommentFormComponent_Factory(t) {\n  return new (t || CommentFormComponent)(i0.ɵɵdirectiveInject(i1.CommentService), i0.ɵɵdirectiveInject(i2.ActivatedRoute), i0.ɵɵdirectiveInject(i3.FormBuilder));\n};\nCommentFormComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: CommentFormComponent,\n  selectors: [[\"app-comment-form\"]],\n  decls: 11,\n  vars: 1,\n  consts: [[3, \"formGroup\", \"ngSubmit\"], [1, \"form-group\"], [\"for\", \"name\"], [\"type\", \"text\", \"formControlName\", \"name\", 1, \"form-control\"], [\"for\", \"text\"], [\"formControlName\", \"text\", 1, \"form-control\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\"]],\n  template: function CommentFormComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"form\", 0);\n      i0.ɵɵlistener(\"ngSubmit\", function CommentFormComponent_Template_form_ngSubmit_0_listener() {\n        return ctx.submitComment();\n      });\n      i0.ɵɵelementStart(1, \"div\", 1)(2, \"label\", 2);\n      i0.ɵɵtext(3, \"Name\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(4, \"input\", 3);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(5, \"div\", 1)(6, \"label\", 4);\n      i0.ɵɵtext(7, \"Comment\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(8, \"textarea\", 5);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(9, \"button\", 6);\n      i0.ɵɵtext(10, \"Submit\");\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"formGroup\", ctx.commentForm);\n    }\n  },\n  dependencies: [i3.ɵNgNoValidate, i3.DefaultValueAccessor, i3.NgControlStatus, i3.NgControlStatusGroup, i3.FormGroupDirective, i3.FormControlName],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"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","names":["Validators","CommentFormComponent","constructor","commentService","route","formBuilder","group","name","required","text","tutorialId","snapshot","params","ngOnInit","getComments","subscribe","next","data","comments","error","console","log","submitComment","comment","commentForm","get","value","createComment","response","submitted","onSubmit","reset","selectors","decls","vars","consts","template","i0","ctx"],"sourceRoot":"","sources":["C:\\Users\\Diego Gomez\\Desktop\\Proyecto-SPA-Angular\\Angular13Crud\\src\\app\\comment-form\\comment-form.component.ts","C:\\Users\\Diego Gomez\\Desktop\\Proyecto-SPA-Angular\\Angular13Crud\\src\\app\\comment-form\\comment-form.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { CommentService } from '../services/comment.service';\nimport { ActivatedRoute } from '@angular/router';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\n\n@Component({\n  selector: 'app-comment-form',\n  templateUrl: './comment-form.component.html',\n  styleUrls: ['./comment-form.component.css']\n})\n\nexport class CommentFormComponent implements OnInit {\n\n  tutorialId: string;\n  comments: any;\n  newComment: any = {};\n  submitted = false;\n  commentForm: FormGroup = this.formBuilder.group({\n    name: ['', Validators.required],\n    text: ['', Validators.required]\n  });\n  \n\n  constructor(\n    private commentService: CommentService,\n    private route: ActivatedRoute,\n    private formBuilder: FormBuilder\n  ) {\n    this.tutorialId = this.route.snapshot.params['id'];\n\n  }\n\n  ngOnInit(): void {\n    this.getComments();\n  }\n\n  getComments() {\n    this.commentService.getComments(this.tutorialId)\n      .subscribe({\n          next: data => {\n            this.comments = data;\n          },\n          error: error => {\n            console.log(error);\n          }\n      });\n  \n  }\n  \n  submitComment() {\n    const comment = {\n      name: this.commentForm.get('name')?.value,\n      text: this.commentForm.get('text')?.value\n    };\n    this.commentService.createComment(this.tutorialId, comment)\n      .subscribe({\n        next: response => {\n          console.log(response);\n          this.submitted = true;\n        },\n        error: error => {\n          console.log(error);\n        }\n      });\n  }\n\n  onSubmit() {\n    const comment = {\n      name: this.commentForm.get('name')?.value,\n      text: this.commentForm.get('text')?.value\n    };\n    this.commentService.createComment(this.tutorialId, comment)\n      .subscribe({\n        next: response => {\n          console.log(response);\n          this.commentForm.reset();\n          this.getComments();\n        },\n        error: error => {\n          console.log(error);\n        }\n      });\n  }\n}\n","<form [formGroup]=\"commentForm\" (ngSubmit)=\"submitComment()\">\n  <div class=\"form-group\">\n    <label for=\"name\">Name</label>\n    <input type=\"text\" class=\"form-control\" formControlName=\"name\">\n  </div>\n  <div class=\"form-group\">\n    <label for=\"text\">Comment</label>\n    <textarea class=\"form-control\" formControlName=\"text\"></textarea>\n  </div>\n  \n  <button type=\"submit\" class=\"btn btn-primary\">Submit</button>\n</form>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}