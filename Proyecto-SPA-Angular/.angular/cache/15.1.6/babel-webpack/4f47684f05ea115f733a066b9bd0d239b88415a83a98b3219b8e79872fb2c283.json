{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/comment.service\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"@angular/common\";\nfunction CommentListComponent_tr_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\")(1, \"td\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"td\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const comment_r1 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(comment_r1.id);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(comment_r1.text);\n  }\n}\nexport class CommentListComponent {\n  constructor(commentService, fb, route) {\n    this.commentService = commentService;\n    this.fb = fb;\n    this.route = route;\n    this.comments = [];\n  }\n  ngOnInit() {\n    const id = this.route.snapshot.paramMap.get('id');\n    if (id) {\n      this.tutorialId = id;\n      this.commentService.getAll(this.tutorialId).subscribe(data => {\n        this.comments = data;\n      }, error => {\n        console.log(error);\n      });\n    }\n    this.commentForm = this.fb.group({\n      text: ['', Validators.required]\n    });\n  }\n  addComment() {\n    const comment = {\n      tutorialId: this.tutorialId,\n      text: this.commentForm.value.text\n    };\n    this.commentService.create(this.tutorialId, comment).subscribe(response => {\n      console.log(response);\n      this.comments.push(response);\n      this.commentForm.reset();\n    }, error => {\n      console.log(error);\n    });\n  }\n}\nCommentListComponent.ɵfac = function CommentListComponent_Factory(t) {\n  return new (t || CommentListComponent)(i0.ɵɵdirectiveInject(i1.CommentService), i0.ɵɵdirectiveInject(i2.FormBuilder), i0.ɵɵdirectiveInject(i3.ActivatedRoute));\n};\nCommentListComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: CommentListComponent,\n  selectors: [[\"app-comment-list\"]],\n  decls: 19,\n  vars: 2,\n  consts: [[1, \"table\", \"table-bordered\", \"table-striped\"], [4, \"ngFor\", \"ngForOf\"], [3, \"formGroup\", \"ngSubmit\"], [1, \"form-group\"], [\"for\", \"text\"], [\"type\", \"text\", \"formControlName\", \"text\", 1, \"form-control\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\"]],\n  template: function CommentListComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\")(1, \"h3\");\n      i0.ɵɵtext(2, \"Comments\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(3, \"table\", 0)(4, \"thead\")(5, \"tr\")(6, \"th\");\n      i0.ɵɵtext(7, \"Id\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(8, \"th\");\n      i0.ɵɵtext(9, \"Text\");\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(10, \"tbody\");\n      i0.ɵɵtemplate(11, CommentListComponent_tr_11_Template, 5, 2, \"tr\", 1);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(12, \"form\", 2);\n      i0.ɵɵlistener(\"ngSubmit\", function CommentListComponent_Template_form_ngSubmit_12_listener() {\n        return ctx.addComment();\n      });\n      i0.ɵɵelementStart(13, \"div\", 3)(14, \"label\", 4);\n      i0.ɵɵtext(15, \"Comment Text:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(16, \"input\", 5);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(17, \"button\", 6);\n      i0.ɵɵtext(18, \"Add Comment\");\n      i0.ɵɵelementEnd()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(11);\n      i0.ɵɵproperty(\"ngForOf\", ctx.comments);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"formGroup\", ctx.commentForm);\n    }\n  },\n  dependencies: [i4.NgForOf, i2.ɵNgNoValidate, i2.DefaultValueAccessor, i2.NgControlStatus, i2.NgControlStatusGroup],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"AACA,SAAiCA,UAAU,QAAQ,gBAAgB;;;;;;;;ICS7DC,0BAAqC;IAC/BA,YAAgB;IAAAA,iBAAK;IACzBA,0BAAI;IAAAA,YAAkB;IAAAA,iBAAK;;;;IADvBA,eAAgB;IAAhBA,mCAAgB;IAChBA,eAAkB;IAAlBA,qCAAkB;;;ADD9B,OAAM,MAAOC,oBAAoB;EAM/BC,YACUC,cAA8B,EAC9BC,EAAe,EACfC,KAAqB;IAFrB,mBAAc,GAAdF,cAAc;IACd,OAAE,GAAFC,EAAE;IACF,UAAK,GAALC,KAAK;IAPf,aAAQ,GAAc,EAAE;EAQpB;EAEJC,QAAQ;IACN,MAAMC,EAAE,GAAG,IAAI,CAACF,KAAK,CAACG,QAAQ,CAACC,QAAQ,CAACC,GAAG,CAAC,IAAI,CAAC;IACjD,IAAIH,EAAE,EAAE;MACN,IAAI,CAACI,UAAU,GAAGJ,EAAE;MACpB,IAAI,CAACJ,cAAc,CAACS,MAAM,CAAC,IAAI,CAACD,UAAU,CAAC,CACxCE,SAAS,CACRC,IAAI,IAAG;QACL,IAAI,CAACC,QAAQ,GAAGD,IAAI;MACtB,CAAC,EACDE,KAAK,IAAG;QACNC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;MACpB,CAAC,CAAC;;IAER,IAAI,CAACG,WAAW,GAAG,IAAI,CAACf,EAAE,CAACgB,KAAK,CAAC;MAC/BC,IAAI,EAAE,CAAC,EAAE,EAAEtB,UAAU,CAACuB,QAAQ;KAC/B,CAAC;EACJ;EAGAC,UAAU;IACR,MAAMC,OAAO,GAAG;MACdb,UAAU,EAAE,IAAI,CAACA,UAAU;MAC3BU,IAAI,EAAE,IAAI,CAACF,WAAW,CAACM,KAAK,CAACJ;KAC9B;IACD,IAAI,CAAClB,cAAc,CAACuB,MAAM,CAAC,IAAI,CAACf,UAAU,EAACa,OAAO,CAAC,CAChDX,SAAS,CACRc,QAAQ,IAAG;MACTV,OAAO,CAACC,GAAG,CAACS,QAAQ,CAAC;MACrB,IAAI,CAACZ,QAAQ,CAACa,IAAI,CAACD,QAAQ,CAAC;MAC5B,IAAI,CAACR,WAAW,CAACU,KAAK,EAAE;IAC1B,CAAC,EACDb,KAAK,IAAG;MACNC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;IACpB,CAAC,CAAC;EACR;;AA9CWf,oBAAoB;mBAApBA,oBAAoB;AAAA;AAApBA,oBAAoB;QAApBA,oBAAoB;EAAA6B;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCXjClC,2BAAK;MACCA,wBAAQ;MAAAA,iBAAK;MACjBA,gCAAkD;MAGxCA,kBAAE;MAAAA,iBAAK;MACXA,0BAAI;MAAAA,oBAAI;MAAAA,iBAAK;MAGjBA,8BAAO;MACLA,qEAGK;MACPA,iBAAQ;MAEVA,gCAA0D;MAA1BA;QAAA,OAAYmC,gBAAY;MAAA,EAAC;MACvDnC,+BAAwB;MACJA,8BAAa;MAAAA,iBAAQ;MACvCA,4BAA+D;MACjEA,iBAAM;MACNA,kCAA8C;MAAAA,4BAAW;MAAAA,iBAAS;;;MAXxCA,gBAAW;MAAXA,sCAAW;MAMjCA,eAAyB;MAAzBA,2CAAyB","names":["Validators","i0","CommentListComponent","constructor","commentService","fb","route","ngOnInit","id","snapshot","paramMap","get","tutorialId","getAll","subscribe","data","comments","error","console","log","commentForm","group","text","required","addComment","comment","value","create","response","push","reset","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\Users\\Diego Gomez\\Desktop\\Proyecto-SPA-Angular\\Angular13Crud\\src\\app\\comment-list\\comment-list.component.ts","C:\\Users\\Diego Gomez\\Desktop\\Proyecto-SPA-Angular\\Angular13Crud\\src\\app\\comment-list\\comment-list.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute } from '@angular/router';\nimport { Comment } from '../models/comment.model';\nimport { CommentService } from '../services/comment.service';\n\n@Component({\n  selector: 'app-comment-list',\n  templateUrl: './comment-list.component.html',\n  styleUrls: ['./comment-list.component.css']\n})\nexport class CommentListComponent implements OnInit {\n\n  comments: Comment[] = [];\n  commentForm!: FormGroup;\n  tutorialId!: string;\n\n  constructor(\n    private commentService: CommentService,\n    private fb: FormBuilder,\n    private route: ActivatedRoute\n  ) { }\n\n  ngOnInit(): void {\n    const id = this.route.snapshot.paramMap.get('id');\n    if (id) {\n      this.tutorialId = id;\n      this.commentService.getAll(this.tutorialId)\n        .subscribe(\n          data => {\n            this.comments = data;\n          },\n          error => {\n            console.log(error);\n          });\n    }\n    this.commentForm = this.fb.group({\n      text: ['', Validators.required]\n    });\n  }\n\n\n  addComment() {\n    const comment = {\n      tutorialId: this.tutorialId,\n      text: this.commentForm.value.text\n    };\n    this.commentService.create(this.tutorialId,comment)\n      .subscribe(\n        response => {\n          console.log(response);\n          this.comments.push(response);\n          this.commentForm.reset();\n        },\n        error => {\n          console.log(error);\n        });\n  }\n\n}\n","<div>\n  <h3>Comments</h3>\n  <table class=\"table table-bordered table-striped\">\n    <thead>\n      <tr>\n        <th>Id</th>\n        <th>Text</th>\n      </tr>\n    </thead>\n    <tbody>\n      <tr *ngFor=\"let comment of comments\">\n        <td>{{ comment.id }}</td>\n        <td>{{ comment.text }}</td>\n      </tr>\n    </tbody>\n  </table>\n  <form [formGroup]=\"commentForm\" (ngSubmit)=\"addComment()\">\n    <div class=\"form-group\">\n      <label for=\"text\">Comment Text:</label>\n      <input type=\"text\" formControlName=\"text\" class=\"form-control\">\n    </div>\n    <button type=\"submit\" class=\"btn btn-primary\">Add Comment</button>\n  </form>\n</div>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}