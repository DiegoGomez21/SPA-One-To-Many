{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, Input } from '@angular/core';\nimport { Tutorial } from 'src/app/models/tutorial.model';\nlet TutorialDetailsComponent = class TutorialDetailsComponent {\n  constructor(tutorialService, commentService, route, router) {\n    this.tutorialService = tutorialService;\n    this.commentService = commentService;\n    this.route = route;\n    this.router = router;\n    this.viewMode = false;\n    this.currentTutorial = {\n      title: '',\n      description: '',\n      published: false\n    };\n    this.comment = {\n      name: '',\n      text: ''\n    };\n    this.message = '';\n    this.id = '';\n    this.currentTutorial = new Tutorial();\n  }\n  ngOnInit() {\n    if (!this.viewMode) {\n      this.message = '';\n      this.route.params.subscribe(params => {\n        const id = this.currentTutorial.id;\n        if (id) {\n          // comprueba que id no sea null o undefined\n          this.id = id;\n          this.getComments(id);\n        }\n      });\n    }\n  }\n  ngOnChanges() {\n    this.id = this.currentTutorial.id;\n    if (this.id) {\n      this.getComments(this.id);\n    }\n  }\n  getComments(id) {\n    this.commentService.getComments(id).subscribe({\n      next: data => {\n        this.comments = data;\n        console.log(data);\n        if (this.comments.length === 0) {\n          console.log('No comments available.');\n        }\n      },\n      error: error => {\n        console.log(error);\n      }\n    });\n  }\n  updatePublished(status) {\n    const data = {\n      title: this.currentTutorial.title,\n      description: this.currentTutorial.description,\n      published: status\n    };\n    this.message = '';\n    this.tutorialService.update(this.currentTutorial.id, data).subscribe({\n      next: res => {\n        console.log(res);\n        this.currentTutorial.published = status;\n        this.message = res.message ? res.message : 'The status was updated successfully!';\n      },\n      error: e => console.error(e)\n    });\n  }\n  updateTutorial() {\n    this.message = '';\n    this.tutorialService.update(this.currentTutorial.id, this.currentTutorial).subscribe({\n      next: res => {\n        console.log(res);\n        this.message = res.message ? res.message : 'This tutorial was updated successfully!';\n      },\n      error: e => console.error(e)\n    });\n  }\n  deleteTutorial() {\n    this.tutorialService.delete(this.currentTutorial.id).subscribe({\n      next: res => {\n        console.log(res);\n        this.router.navigate(['/tutorials']);\n      },\n      error: e => console.error(e)\n    });\n  }\n  addComment() {\n    const data = {\n      name: this.comment.name,\n      text: this.comment.text\n    };\n    this.commentService.createComment(this.currentTutorial.id, data).subscribe({\n      next: response => {\n        console.log(response);\n        this.comment.name = '';\n        this.comment.text = '';\n      },\n      error: error => {\n        console.log(error);\n      }\n    });\n  }\n};\n__decorate([Input()], TutorialDetailsComponent.prototype, \"viewMode\", void 0);\n__decorate([Input()], TutorialDetailsComponent.prototype, \"currentTutorial\", void 0);\nTutorialDetailsComponent = __decorate([Component({\n  selector: 'app-tutorial-details',\n  templateUrl: './tutorial-details.component.html',\n  styleUrls: ['./tutorial-details.component.css']\n})], TutorialDetailsComponent);\nexport { TutorialDetailsComponent };","map":{"version":3,"mappings":"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","names":["Component","Input","Tutorial","TutorialDetailsComponent","constructor","tutorialService","commentService","route","router","title","description","published","name","text","currentTutorial","ngOnInit","viewMode","message","params","subscribe","id","getComments","ngOnChanges","next","data","comments","console","log","length","error","updatePublished","status","update","res","e","updateTutorial","deleteTutorial","delete","navigate","addComment","comment","createComment","response","__decorate","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\Diego Gomez\\Desktop\\Proyecto-SPA-Angular\\Angular13Crud\\src\\app\\components\\tutorial-details\\tutorial-details.component.ts"],"sourcesContent":["import { Component, Input, OnInit } from '@angular/core';\nimport { TutorialService } from 'src/app/services/tutorial.service';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Tutorial } from 'src/app/models/tutorial.model';\nimport { CommentService } from 'src/app/services/comment.service';\n\n@Component({\n  selector: 'app-tutorial-details',\n  templateUrl: './tutorial-details.component.html',\n  styleUrls: ['./tutorial-details.component.css']\n})\nexport class TutorialDetailsComponent implements OnInit {\n\n  @Input() viewMode = false;\n\n  @Input() currentTutorial: Tutorial = {\n    title: '',\n    description: '',\n    published: false\n  };\n\n  comments: any;\n\n  comment = {\n    name: '',\n    text: ''\n  };\n\n  message = '';\n\n  constructor(private tutorialService: TutorialService, private commentService: CommentService, private route: ActivatedRoute, private router: Router) {\n    this.currentTutorial = new Tutorial();\n  }\n\n\n\n  id = '';\n  ngOnInit(): void {\n    if (!this.viewMode) {\n      this.message = '';\n      this.route.params.subscribe(params => {\n        const id = this.currentTutorial.id;\n        if (id) { // comprueba que id no sea null o undefined\n          this.id = id;\n          this.getComments(id);\n        }\n      });\n    }\n  }\n  \n  ngOnChanges(): void {\n    this.id = this.currentTutorial.id;\n    if (this.id) {\n      this.getComments(this.id);\n    }\n  }\n\n  getComments(id: any): void {\n    this.commentService.getComments(id)\n      .subscribe({\n        next: data => {\n          this.comments = data;\n          console.log(data);\n          if (this.comments.length === 0) {\n            console.log('No comments available.');\n          }\n        },\n        error: error => {\n          console.log(error);\n        }\n      });\n  }\n\n  updatePublished(status: boolean): void {\n    const data = {\n      title: this.currentTutorial.title,\n      description: this.currentTutorial.description,\n      published: status\n    };\n\n    this.message = '';\n\n    this.tutorialService.update(this.currentTutorial.id, data)\n      .subscribe({\n        next: (res) => {\n          console.log(res);\n          this.currentTutorial.published = status;\n          this.message = res.message ? res.message : 'The status was updated successfully!';\n        },\n        error: (e) => console.error(e)\n      });\n  }\n\n  updateTutorial(): void {\n    this.message = '';\n\n    this.tutorialService.update(this.currentTutorial.id, this.currentTutorial)\n      .subscribe({\n        next: (res) => {\n          console.log(res);\n          this.message = res.message ? res.message : 'This tutorial was updated successfully!';\n        },\n        error: (e) => console.error(e)\n      });\n  }\n\n  deleteTutorial(): void {\n    this.tutorialService.delete(this.currentTutorial.id)\n      .subscribe({\n        next: (res) => {\n          console.log(res);\n          this.router.navigate(['/tutorials']);\n        },\n        error: (e) => console.error(e)\n      });\n  }\n\n  addComment(): void {\n    const data = {\n      name: this.comment.name,\n      text: this.comment.text\n    };\n  \n    this.commentService.createComment(this.currentTutorial.id, data)\n      .subscribe({\n        next: response => {\n          console.log(response);\n          this.comment.name = '';\n          this.comment.text = '';\n        },\n        error: error => {\n          console.log(error);\n        }\n      });\n  }\n}\n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}